// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUserGetHandlerFunc turns a function with the right signature into a get user get handler
type GetUserGetHandlerFunc func(GetUserGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserGetHandlerFunc) Handle(params GetUserGetParams) middleware.Responder {
	return fn(params)
}

// GetUserGetHandler interface for that can handle valid get user get params
type GetUserGetHandler interface {
	Handle(GetUserGetParams) middleware.Responder
}

// NewGetUserGet creates a new http.Handler for the get user get operation
func NewGetUserGet(ctx *middleware.Context, handler GetUserGetHandler) *GetUserGet {
	return &GetUserGet{Context: ctx, Handler: handler}
}

/* GetUserGet swagger:route GET /user/get user getUserGet

ユーザ情報取得API

ユーザ情報を取得します。
 ユーザの認証と特定の処理はリクエストヘッダのx-tokenを読み取ってデータベースに照会をします。

*/
type GetUserGet struct {
	Context *middleware.Context
	Handler GetUserGetHandler
}

func (o *GetUserGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserGetParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
