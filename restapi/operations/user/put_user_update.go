// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutUserUpdateHandlerFunc turns a function with the right signature into a put user update handler
type PutUserUpdateHandlerFunc func(PutUserUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutUserUpdateHandlerFunc) Handle(params PutUserUpdateParams) middleware.Responder {
	return fn(params)
}

// PutUserUpdateHandler interface for that can handle valid put user update params
type PutUserUpdateHandler interface {
	Handle(PutUserUpdateParams) middleware.Responder
}

// NewPutUserUpdate creates a new http.Handler for the put user update operation
func NewPutUserUpdate(ctx *middleware.Context, handler PutUserUpdateHandler) *PutUserUpdate {
	return &PutUserUpdate{Context: ctx, Handler: handler}
}

/* PutUserUpdate swagger:route PUT /user/update user putUserUpdate

ユーザ情報更新API

ユーザ情報の更新をします。
 初期実装では名前の更新を行います。

*/
type PutUserUpdate struct {
	Context *middleware.Context
	Handler PutUserUpdateHandler
}

func (o *PutUserUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutUserUpdateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
